<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!-- 生命springMvc的核心对象 DispatcherServlet
    需要在tomcat服务器启动后 就创建DispatcherServlet 对象的实例
    为什么要创建DispatchServlet对象的实例呢?
    因为DispatcherServlet 在他的创建过程中 会同时创建springmvc容器对象
    读取springmvc的配置文件,把这个配置文件中的对象创建好,当用户发起请求的时候
    请求就可以直接使用这个对象.
     servlet的初始化会执行init（）方法。 DispatcherServlet在init（）中{
           //创建容器，读取配置文件
           WebApplicationContext ctx = new ClassPathXmlApplicationContext("springmvc.xml");
           //把容器对象放入到ServletContext中
           getServletContext().setAttribute(key, ctx);
        }

       启动tomcat报错 读取这个文件 /WEB-INF/myWeb-servlet.xml
       springmvc在创建容器对象的时候,默认读取的是 /WEB-INF/ servletName /servlet.xml

-->
    <servlet>
        <servlet-name>myWeb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!--   自定义springmvc 读取配置文件的位置     -->
        <init-param>
            <!--   springmvc配置文件的位置属性    -->
            <param-name>contextConfigLocation</param-name>
            <!--   指定自定义配置文件的位置  -->
            <param-value>classpath:springmvc2.xml</param-value>
        </init-param>
      <!--  在tomcat 启动服务器后就常见servlet对象
           他的值是一个整数值,他的数值越小,tomcat创建servlet对象的时间就越早,是一个>=0的整数
      -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>myWeb</servlet-name>
            <!--  使用框架的时候url-pattern有两种值
               1.使用扩展名的方式 语法*.xxx,xxx是自定义的扩展名 常用方式 : *.do ,*.action ,*.mvc
               如果请求地址中是以 .do结尾的 都交给 myWeb 这个servlet处理
               http://localhost:8080/myweb/some.do
               2.使用斜杆 / 当这里使用了 / tomcat中的default Servlet就没有了
                导致所有的静态资源都给DispatcherServlet处理， 默认情况下DispatcherServlet没有处理静态资源的能力。
              没有控制器对象能处理静态资源的访问。所以静态资源（html，js，图片，css）都是404.

               -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

<!--  注册字符集过滤器,解决post请求的中文乱码问题-->
    <filter>
        <filter-name>charaterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
<!--  指定字符集  -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--Request 使用encoding字符编码格式-->
        <init-param>
            <param-name>forRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
<!--强制Response 使用encoding字符编码格式-->
        <init-param>
            <param-name>forResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>

    </filter>
<!-- 所有的请求都经过字符编码处理   -->
    <filter-mapping>
        <filter-name>charaterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>